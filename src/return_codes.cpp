#include <vulkan/vulkan.h>

#include <iostream>
#include <string>

using namespace std::literals::string_literals;

#define SUCCESS_CODES(o) \
	o(VK_SUCCESS) \
	o(VK_NOT_READY) \
	o(VK_TIMEOUT) \
	o(VK_EVENT_SET) \
	o(VK_EVENT_RESET) \
	o(VK_INCOMPLETE) \
	o(VK_SUBOPTIMAL_KHR) \
	o(VK_THREAD_IDLE_KHR) \
	o(VK_THREAD_DONE_KHR) \
	o(VK_OPERATION_DEFERRED_KHR) \
	o(VK_OPERATION_NOT_DEFERRED_KHR) \
	o(VK_PIPELINE_COMPILE_REQUIRED) \
	o(VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT)

#define ERROR_CODES(o) \
	o(VK_ERROR_OUT_OF_HOST_MEMORY) \
	o(VK_ERROR_OUT_OF_DEVICE_MEMORY) \
	o(VK_ERROR_INITIALIZATION_FAILED) \
	o(VK_ERROR_DEVICE_LOST) \
	o(VK_ERROR_MEMORY_MAP_FAILED) \
	o(VK_ERROR_LAYER_NOT_PRESENT) \
	o(VK_ERROR_EXTENSION_NOT_PRESENT) \
	o(VK_ERROR_FEATURE_NOT_PRESENT) \
	o(VK_ERROR_INCOMPATIBLE_DRIVER) \
	o(VK_ERROR_TOO_MANY_OBJECTS) \
	o(VK_ERROR_FORMAT_NOT_SUPPORTED) \
	o(VK_ERROR_FRAGMENTED_POOL) \
	o(VK_ERROR_SURFACE_LOST_KHR) \
	o(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR) \
	o(VK_ERROR_OUT_OF_DATE_KHR) \
	o(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR) \
	o(VK_ERROR_INVALID_SHADER_NV) \
	o(VK_ERROR_OUT_OF_POOL_MEMORY) \
	o(VK_ERROR_INVALID_EXTERNAL_HANDLE) \
	o(VK_ERROR_FRAGMENTATION) \
	o(VK_ERROR_INVALID_DEVICE_ADDRESS_EXT) \
	o(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT) \
	o(VK_ERROR_VALIDATION_FAILED_EXT) \
	o(VK_ERROR_COMPRESSION_EXHAUSTED_EXT) \
	o(VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR) \
	o(VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR) \
	o(VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR) \
	o(VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR) \
	o(VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR) \
	o(VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR) \
	o(VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR) \
	o(VK_ERROR_UNKNOWN)

#define o(id) case id: os << #id##s; break;
std::ostream& operator<<(std::ostream& os, VkResult id) {
	switch (id) {
		SUCCESS_CODES(o)
		ERROR_CODES(o)
		default: os.setstate(std::ios_base::failbit);
	}
	return os;
}
#undef o

#undef SUCCESS_CODES
#undef ERROR_CODES

bool success(VkResult r) { return r >= 0; };
